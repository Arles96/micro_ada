/* The following code was generated by JFlex 1.4.2 on 09-01-09 05:29 PM */

/**Elementos léxicos del lenguaje de programación ADA-95.
*Autor: Luis Felipe Borjas Reyes @ 25 Agosto 2009
*
*/
/*Correr después del parser!*/
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 09-01-09 05:29 PM from the specification file
 * <tt>ada95_tokens.flex</tt>
 */
class Ada95Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\14\1\0\1\12\1\14\22\0\1\3\1\0\1\11"+
    "\1\5\2\0\1\46\1\15\1\47\1\50\1\51\1\7\1\52\1\10"+
    "\1\6\1\53\12\2\1\54\1\55\1\56\1\57\1\60\2\0\1\24"+
    "\1\27\1\17\1\35\1\16\1\23\1\33\1\36\1\32\1\1\1\43"+
    "\1\25\1\41\1\31\1\30\1\34\1\45\1\21\1\26\1\20\1\22"+
    "\1\44\1\42\1\40\1\37\1\1\4\0\1\4\1\0\1\24\1\27"+
    "\1\17\1\35\1\16\1\23\1\33\1\36\1\32\1\1\1\43\1\25"+
    "\1\41\1\31\1\30\1\34\1\45\1\21\1\26\1\20\1\22\1\13"+
    "\1\42\1\40\1\37\1\1\1\0\1\61\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\4\1\11\23\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\5\0\1\31\2\0\1\32\23\0"+
    "\1\33\13\0\1\34\1\0\1\35\3\0\1\36\1\37"+
    "\1\40\6\0\1\41\5\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\26\2\0\1\53"+
    "\1\54\1\0\1\55\1\32\2\0\1\56\16\0\1\57"+
    "\3\0\1\60\4\0\1\61\2\0\1\62\1\0\1\63"+
    "\1\0\1\64\12\0\1\65\1\66\1\0\1\67\1\0"+
    "\1\70\5\0\1\71\4\0\1\72\1\73\4\0\1\74"+
    "\1\0\1\75\3\0\1\76\1\77\2\0\1\100\1\101"+
    "\1\0\1\102\1\103\20\0\1\104\6\0\1\105\2\0"+
    "\1\106\3\0\1\107\11\0\1\110\1\111\4\0\1\112"+
    "\1\113\11\0\1\114\1\115\1\116\1\0\1\117\2\0"+
    "\1\120\2\0\1\121\5\0\1\122\14\0\1\123\1\124"+
    "\1\0\1\125\1\74\4\0\1\126\1\0\1\127\1\130"+
    "\3\0\1\131\1\132\4\0\1\133\3\0\1\134\1\0"+
    "\1\135\2\0\1\136\5\0\1\137\3\0\1\140\1\141"+
    "\1\142\1\0\1\143\2\0\1\144\1\0\1\145\1\146"+
    "\1\147\1\150\1\151\2\0\1\152\1\153\1\154\1\0"+
    "\1\155\1\0\1\156\1\157\1\160\1\161\2\0\1\162"+
    "\1\163\1\164\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\144"+
    "\0\u015e\0\144\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\144"+
    "\0\144\0\144\0\u05aa\0\144\0\u05dc\0\u060e\0\144\0\u0640"+
    "\0\u0672\0\u06a4\0\144\0\u06d6\0\u0708\0\144\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\144\0\u0834\0\u0866\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\144\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\144\0\u0ed8\0\u0f0a\0\u0f3c\0\144\0\144\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\144\0\u10cc\0\u10fe"+
    "\0\u1130\0\u1162\0\u1194\0\144\0\144\0\144\0\144\0\144"+
    "\0\144\0\144\0\144\0\144\0\144\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u0834\0\144\0\u12c0\0\u12f2\0\144\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\144\0\u15e0\0\u1612"+
    "\0\u1644\0\144\0\u1676\0\u16a8\0\u16da\0\u170c\0\144\0\u173e"+
    "\0\u1770\0\144\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\144\0\144\0\u1a5e\0\u1a90\0\u1ac2\0\144\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u1b8a\0\u1bbc\0\144\0\u1bee\0\u1c20\0\u1c52\0\u1c84"+
    "\0\144\0\144\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0"+
    "\0\144\0\u1de2\0\u1e14\0\u1e46\0\144\0\144\0\u1e78\0\u1eaa"+
    "\0\144\0\144\0\u1edc\0\144\0\144\0\u1f0e\0\u1f40\0\u1f72"+
    "\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102"+
    "\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\144\0\u222e\0\u2260"+
    "\0\u2292\0\u22c4\0\u22f6\0\u2328\0\144\0\u235a\0\u238c\0\144"+
    "\0\u23be\0\u23f0\0\u2422\0\144\0\u2454\0\u2486\0\u24b8\0\u24ea"+
    "\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\144\0\144\0\u2616"+
    "\0\u2648\0\u267a\0\u26ac\0\144\0\144\0\u26de\0\u2710\0\u2742"+
    "\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\144\0\144"+
    "\0\144\0\u28a0\0\144\0\u28d2\0\u2904\0\144\0\u2936\0\u2968"+
    "\0\144\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\144\0\u2a94"+
    "\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24"+
    "\0\u2c56\0\u2c88\0\u2cba\0\144\0\144\0\u2cec\0\144\0\u2d1e"+
    "\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\144\0\u2e18\0\144\0\144"+
    "\0\u2e4a\0\u2e7c\0\u2eae\0\144\0\144\0\u2ee0\0\u2f12\0\u2f44"+
    "\0\u2f76\0\144\0\u2fa8\0\u2fda\0\u300c\0\144\0\u303e\0\144"+
    "\0\u3070\0\u30a2\0\144\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c"+
    "\0\144\0\u31ce\0\u3200\0\u3232\0\144\0\144\0\144\0\u3264"+
    "\0\144\0\u3296\0\u32c8\0\144\0\u32fa\0\144\0\144\0\144"+
    "\0\144\0\144\0\u332c\0\u335e\0\144\0\144\0\144\0\u3390"+
    "\0\144\0\u33c2\0\144\0\144\0\144\0\144\0\u33f4\0\u3426"+
    "\0\144\0\144\0\144\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\3\1\7\1\10\1\11"+
    "\1\12\1\6\1\13\1\6\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\4\1\35\1\36"+
    "\1\37\3\4\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\11\54\1\55"+
    "\2\54\1\56\45\54\66\0\1\57\57\0\1\5\1\0"+
    "\1\60\1\61\1\62\7\0\1\63\46\0\1\6\6\0"+
    "\3\6\53\0\1\64\63\0\1\65\54\0\1\6\1\57"+
    "\5\0\3\6\45\0\15\66\1\67\44\66\4\0\1\57"+
    "\20\0\1\70\3\0\1\71\6\0\1\72\25\0\1\57"+
    "\17\0\1\73\3\0\1\74\35\0\1\57\11\0\1\75"+
    "\2\0\1\76\2\0\1\77\11\0\1\100\1\101\26\0"+
    "\1\57\11\0\1\102\5\0\1\103\41\0\1\57\21\0"+
    "\1\104\2\0\1\105\34\0\1\57\15\0\1\106\1\0"+
    "\1\107\1\110\2\0\1\111\35\0\1\57\12\0\1\112"+
    "\1\113\1\114\3\0\1\115\1\0\1\116\1\0\1\117"+
    "\34\0\1\57\23\0\1\120\1\0\1\121\33\0\1\57"+
    "\11\0\1\122\3\0\1\123\43\0\1\57\11\0\1\124"+
    "\11\0\1\125\35\0\1\57\13\0\1\126\1\127\1\130"+
    "\1\131\42\0\1\57\11\0\1\132\3\0\1\133\5\0"+
    "\1\134\35\0\1\57\16\0\1\135\2\0\1\136\2\0"+
    "\1\137\34\0\1\57\11\0\1\140\11\0\1\141\35\0"+
    "\1\57\14\0\1\142\1\143\1\0\1\144\41\0\1\57"+
    "\11\0\1\145\11\0\1\146\1\0\1\147\33\0\1\57"+
    "\23\0\1\150\35\0\1\57\23\0\1\151\35\0\1\57"+
    "\25\0\1\152\3\0\1\153\74\0\1\154\67\0\1\155"+
    "\61\0\1\156\60\0\1\157\1\160\1\161\61\0\1\162"+
    "\60\0\1\163\1\164\1\0\11\54\1\0\2\54\1\0"+
    "\45\54\11\0\1\165\51\0\2\4\10\0\1\4\2\0"+
    "\30\4\16\0\1\166\61\0\1\167\13\0\2\167\3\0"+
    "\2\167\2\0\1\167\5\0\1\167\26\0\1\170\61\0"+
    "\1\171\4\0\2\172\51\0\14\65\1\173\45\65\15\0"+
    "\1\174\72\0\1\175\53\0\1\176\14\0\1\177\43\0"+
    "\1\200\12\0\1\201\55\0\1\202\64\0\1\203\51\0"+
    "\1\204\62\0\1\205\65\0\1\206\4\0\1\207\44\0"+
    "\1\210\77\0\1\211\40\0\1\212\3\0\1\213\1\214"+
    "\10\0\1\215\7\0\1\216\2\0\1\212\1\217\45\0"+
    "\1\220\1\221\45\0\1\222\63\0\1\223\72\0\1\224"+
    "\55\0\1\225\64\0\1\226\52\0\1\227\57\0\1\230"+
    "\63\0\1\231\65\0\1\232\4\0\1\233\55\0\1\234"+
    "\1\0\1\235\66\0\1\236\54\0\1\237\72\0\1\240"+
    "\45\0\1\241\6\0\1\242\54\0\1\243\65\0\1\244"+
    "\56\0\1\245\4\0\1\246\62\0\1\247\26\0\1\250"+
    "\76\0\1\251\103\0\1\252\44\0\1\253\54\0\1\254"+
    "\61\0\1\255\61\0\1\256\10\0\1\257\50\0\1\260"+
    "\65\0\1\261\3\0\1\262\1\0\1\263\47\0\1\264"+
    "\60\0\1\265\61\0\1\266\5\0\1\267\67\0\1\270"+
    "\47\0\1\271\75\0\1\272\44\0\1\273\57\0\1\274"+
    "\13\0\1\275\31\0\1\166\1\0\1\60\1\61\1\276"+
    "\7\0\1\63\45\0\1\167\1\0\1\61\1\277\1\300"+
    "\7\0\2\167\3\0\2\167\2\0\1\167\5\0\1\167"+
    "\26\0\1\170\1\0\1\276\11\0\1\63\45\0\1\171"+
    "\1\0\1\172\57\0\1\171\75\0\1\301\13\0\1\302"+
    "\50\0\1\303\56\0\1\304\63\0\1\305\57\0\1\306"+
    "\71\0\1\307\74\0\1\310\36\0\1\311\106\0\1\312"+
    "\51\0\1\313\57\0\1\314\46\0\1\315\61\0\1\316"+
    "\73\0\1\317\53\0\1\320\63\0\1\321\57\0\1\322"+
    "\72\0\1\323\54\0\1\324\65\0\1\325\46\0\1\326"+
    "\70\0\1\205\57\0\1\327\53\0\1\330\67\0\1\331"+
    "\61\0\1\332\55\0\1\333\62\0\1\334\43\0\1\335"+
    "\112\0\1\336\57\0\1\337\45\0\1\340\67\0\1\341"+
    "\55\0\1\342\73\0\1\343\54\0\1\344\73\0\1\345"+
    "\40\0\1\346\61\0\1\347\70\0\1\350\37\0\1\351"+
    "\74\0\1\352\61\0\1\353\73\0\1\354\64\0\1\355"+
    "\45\0\1\356\1\357\54\0\1\360\30\0\1\360\60\0"+
    "\1\361\43\0\1\362\54\0\1\363\3\0\1\364\67\0"+
    "\1\365\65\0\1\366\54\0\1\367\55\0\1\370\36\0"+
    "\1\371\75\0\1\372\45\0\1\373\13\0\2\373\3\0"+
    "\2\373\2\0\1\373\5\0\1\373\47\0\1\374\75\0"+
    "\1\375\56\0\1\376\45\0\1\377\73\0\1\u0100\45\0"+
    "\1\u0101\64\0\1\u0102\61\0\1\u0103\61\0\1\u0104\101\0"+
    "\1\u0105\36\0\1\u0106\61\0\1\u0107\61\0\1\u0108\70\0"+
    "\1\u0109\54\0\1\u010a\61\0\1\u010b\67\0\1\u010c\5\0"+
    "\1\u010d\64\0\1\u010e\50\0\1\u010f\54\0\1\u0110\60\0"+
    "\1\u0111\61\0\1\u0112\61\0\1\u0113\60\0\1\u0114\63\0"+
    "\1\u0115\77\0\1\u0116\53\0\1\u0117\46\0\1\u0118\64\0"+
    "\1\u0119\65\0\1\u011a\66\0\1\u011b\62\0\1\u011c\47\0"+
    "\1\u011d\101\0\1\u011e\36\0\1\u011f\61\0\1\u0120\67\0"+
    "\1\u0121\61\0\1\u0122\61\0\1\u0123\61\0\1\u0124\74\0"+
    "\1\u0125\42\0\1\u0126\57\0\1\u0127\45\0\1\371\1\0"+
    "\1\276\11\0\1\63\45\0\1\u0128\4\0\2\u0129\53\0"+
    "\1\373\1\0\1\300\1\277\10\0\2\373\3\0\2\373"+
    "\2\0\1\373\5\0\1\373\44\0\1\u012a\65\0\1\u012b"+
    "\66\0\1\u012c\65\0\1\u012d\52\0\1\u012e\70\0\1\u012f"+
    "\55\0\1\u0130\46\0\1\u0131\65\0\1\u0132\71\0\1\u0133"+
    "\55\0\1\u0134\53\0\1\u0135\57\0\1\u0136\67\0\1\u0137"+
    "\73\0\1\u0138\41\0\1\u0139\63\0\1\u013a\65\0\1\u013b"+
    "\71\0\1\u013c\51\0\1\u013d\63\0\1\u013e\61\0\1\u013f"+
    "\64\0\1\u0140\46\0\1\u0141\75\0\1\u0142\53\0\1\u0143"+
    "\72\0\1\u0144\43\0\1\u0145\62\0\1\u0146\74\0\1\u0147"+
    "\47\0\1\u0148\66\0\1\u0149\35\0\1\u0128\1\0\1\u0129"+
    "\57\0\1\u0128\111\0\1\u014a\60\0\1\u014b\54\0\1\u014c"+
    "\53\0\1\u014d\71\0\1\u014e\51\0\1\u014f\73\0\1\u0150"+
    "\66\0\1\u0151\43\0\1\u0152\60\0\1\u0153\100\0\1\u0154"+
    "\44\0\1\u0155\57\0\1\u0156\74\0\1\u0157\46\0\1\u0158"+
    "\64\0\1\u0159\57\0\1\u015a\64\0\1\u015b\57\0\1\u015c"+
    "\57\0\1\u015d\61\0\1\u015e\61\0\1\u015f\73\0\1\u0160"+
    "\51\0\1\u0161\61\0\1\u0162\72\0\1\u0163\50\0\1\u0164"+
    "\72\0\1\u0165\46\0\1\u0166\64\0\1\u0167\56\0\1\u0168"+
    "\74\0\1\u0169\46\0\1\u016a\61\0\1\u016b\100\0\1\u016c"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\1\11\25\1\3\11"+
    "\1\1\1\11\2\1\1\11\3\1\1\11\2\1\1\11"+
    "\5\0\1\11\2\0\1\1\23\0\1\11\13\0\1\1"+
    "\1\0\1\11\3\0\2\11\1\1\6\0\1\11\5\0"+
    "\12\11\2\0\2\1\1\0\1\1\1\11\2\0\1\11"+
    "\16\0\1\11\3\0\1\11\4\0\1\11\2\0\1\11"+
    "\1\0\1\1\1\0\1\1\12\0\2\11\1\0\1\1"+
    "\1\0\1\11\5\0\1\11\4\0\2\11\4\0\1\1"+
    "\1\0\1\11\3\0\2\11\2\0\2\11\1\0\2\11"+
    "\20\0\1\11\6\0\1\11\2\0\1\11\3\0\1\11"+
    "\11\0\2\11\4\0\2\11\11\0\3\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\5\0\1\11\14\0\2\11"+
    "\1\0\1\11\1\1\4\0\1\11\1\0\2\11\3\0"+
    "\2\11\4\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\3\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\5\11\2\0\3\11\1\0\1\11\1\0"+
    "\4\11\2\0\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
StringBuffer string=new StringBuffer();
/**Función para crear un nuevo símbolo de java_cup.runtime vacío*/
private Symbol symbol(int type){
	return new Symbol(type,yyline,yycolumn);
}

/**Función para crear un nuevo símbolo de java_cup.runtime con valor
*@ param value el valor del símbolo
*/
private Symbol symbol(int type, Object value){
	return new Symbol(type, yyline, yycolumn, value);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Ada95Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Ada95Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 115: 
          { return symbol(sym.TERMINATE);
          }
        case 118: break;
        case 112: 
          { return symbol(sym.AND_THEN);
          }
        case 119: break;
        case 67: 
          { return symbol(sym.TYPE);
          }
        case 120: break;
        case 38: 
          { return symbol(sym.LTEQ);
          }
        case 121: break;
        case 59: 
          { return symbol(sym.MOD);
          }
        case 122: break;
        case 32: 
          { return symbol(sym.IN);
          }
        case 123: break;
        case 111: 
          { return symbol(sym.ABSTRACT);
          }
        case 124: break;
        case 45: 
          { /*ignorar*/
          }
        case 125: break;
        case 76: 
          { return symbol(sym.RANGE);
          }
        case 126: break;
        case 28: 
          { return symbol(sym.OR);
          }
        case 127: break;
        case 10: 
          { return symbol(sym.CONCATENATE);
          }
        case 128: break;
        case 90: 
          { return symbol(sym.ACCEPT);
          }
        case 129: break;
        case 73: 
          { return symbol(sym.WHEN);
          }
        case 130: break;
        case 57: 
          { return symbol(sym.PUT);
          }
        case 131: break;
        case 69: 
          { return symbol(sym.BODY);
          }
        case 132: break;
        case 8: 
          { string.setLength(0);yybegin(STRING);
          }
        case 133: break;
        case 80: 
          { return symbol(sym.ARRAY);
          }
        case 134: break;
        case 11: 
          { return symbol(sym.LEFTPAR);
          }
        case 135: break;
        case 79: 
          { return symbol(sym.FLOAT);
          }
        case 136: break;
        case 7: 
          { return symbol(sym.MINUS);
          }
        case 137: break;
        case 25: 
          { return symbol(sym.DOUBLEDOT);
          }
        case 138: break;
        case 74: 
          { return symbol(sym.ELSIF);
          }
        case 139: break;
        case 17: 
          { return symbol(sym.SEMICOLON);
          }
        case 140: break;
        case 61: 
          { return symbol(sym.ELSE);
          }
        case 141: break;
        case 62: 
          { return symbol(sym.EXIT);
          }
        case 142: break;
        case 64: 
          { return symbol(sym.BOOLEAN_LITERAL,yytext();)
          }
        case 143: break;
        case 19: 
          { return symbol(sym.EQUAL);
          }
        case 144: break;
        case 37: 
          { return symbol(sym.LEFTLABEL);
          }
        case 145: break;
        case 98: 
          { return symbol(sym.REQUEUE);
          }
        case 146: break;
        case 97: 
          { return symbol(sym.RENAMES);
          }
        case 147: break;
        case 36: 
          { return symbol(sym.ASSIGNMENT);
          }
        case 148: break;
        case 5: 
          { return symbol(sym.POINT);
          }
        case 149: break;
        case 78: 
          { return symbol(sym.UNTIL);
          }
        case 150: break;
        case 89: 
          { return symbol(sym.ACCESS);
          }
        case 151: break;
        case 23: 
          { yybegin(YYINITIAL);
	 return symbol(sym.STRING_LITERAL,string.toString());
          }
        case 152: break;
        case 114: 
          { return symbol(sym.EXCEPTION);
          }
        case 153: break;
        case 41: 
          { return symbol(sym.GTEQ);
          }
        case 154: break;
        case 16: 
          { return symbol(sym.COLON);
          }
        case 155: break;
        case 68: 
          { return symbol(sym.LOOP);
          }
        case 156: break;
        case 52: 
          { return symbol(sym.AND);
          }
        case 157: break;
        case 91: 
          { return symbol(sym.SELECT);
          }
        case 158: break;
        case 117: 
          { return symbol(sym.PROTECTED);
          }
        case 159: break;
        case 94: 
          { return symbol(sym.PRAGMA);
          }
        case 160: break;
        case 53: 
          { return symbol(sym.OUT);
          }
        case 161: break;
        case 96: 
          { return symbol(sym.REVERSE);
          }
        case 162: break;
        case 30: 
          { return symbol(sym.IF);
          }
        case 163: break;
        case 55: 
          { return symbol(sym.NOT);
          }
        case 164: break;
        case 77: 
          { return symbol(sym.RAISE);
          }
        case 165: break;
        case 12: 
          { return symbol(sym.RIGHTPAR);
          }
        case 166: break;
        case 105: 
          { return symbol(sym.GENERIC);
          }
        case 167: break;
        case 85: 
          { return symbol(sym.WHILE);
          }
        case 168: break;
        case 56: 
          { return symbol(sym.GET);
          }
        case 169: break;
        case 26: 
          { return symbol(sym.CHARACTER_LITERAL,yytext());
          }
        case 170: break;
        case 108: 
          { return symbol(sym.DECLARE);
          }
        case 171: break;
        case 14: 
          { return symbol(sym.COMMA);
          }
        case 172: break;
        case 65: 
          { return symbol(sym.TASK);
          }
        case 173: break;
        case 87: 
          { return symbol(sym.RECORD);
          }
        case 174: break;
        case 95: 
          { return symbol(sym.DIGITS);
          }
        case 175: break;
        case 35: 
          { return symbol(sym.INEQUALITY);
          }
        case 176: break;
        case 103: 
          { return symbol(sym.OR_ELSE);
          }
        case 177: break;
        case 39: 
          { return symbol(sym.BOX);
          }
        case 178: break;
        case 29: 
          { return symbol(sym.OF);
          }
        case 179: break;
        case 51: 
          { return symbol(sym.ABS);
          }
        case 180: break;
        case 102: 
          { return symbol(sym.BOOLEAN);
          }
        case 181: break;
        case 70: 
          { return symbol(sym.NULL);
          }
        case 182: break;
        case 9: 
          { return symbol(sym.TICK);
          }
        case 183: break;
        case 72: 
          { return symbol(sym.WITH);
          }
        case 184: break;
        case 22: 
          { string.append(yytext());
          }
        case 185: break;
        case 46: 
          { return symbol(sym.END);
          }
        case 186: break;
        case 58: 
          { return symbol(sym.XOR);
          }
        case 187: break;
        case 44: 
          { System.err.println("<"+yytext()+"> Es un número con exponente, este compilador sólo acepta números enteros y de punto flotante sin exponente");
          }
        case 188: break;
        case 6: 
          { return symbol(sym.PLUS);
          }
        case 189: break;
        case 92: 
          { return symbol(sym.OTHERS);
          }
        case 190: break;
        case 47: 
          { return symbol(sym.REM);
          }
        case 191: break;
        case 60: 
          { System.err.println("<"+yytext()+"> Es un número con base, este compilador sólo acepta números enteros y de punto flotante sin exponente");
          }
        case 192: break;
        case 40: 
          { return symbol(sym.ARROW);
          }
        case 193: break;
        case 48: 
          { return symbol(sym.USE);
          }
        case 194: break;
        case 82: 
          { return symbol(sym.BEGIN);
          }
        case 195: break;
        case 71: 
          { return symbol(sym.GOTO);
          }
        case 196: break;
        case 4: 
          { /*return symbol(sym.SEPARATOR);*/
          }
        case 197: break;
        case 66: 
          { return symbol(sym.THEN);
          }
        case 198: break;
        case 42: 
          { return symbol(sym.RIGHTLABEL);
          }
        case 199: break;
        case 106: 
          { return symbol(sym.PRIVATE);
          }
        case 200: break;
        case 34: 
          { return symbol(sym.EXPONENTIATE);
          }
        case 201: break;
        case 116: 
          { return symbol(sym.PROCEDURE);
          }
        case 202: break;
        case 88: 
          { return symbol(sym.RETURN);
          }
        case 203: break;
        case 27: 
          { return symbol(sym.AT);
          }
        case 204: break;
        case 107: 
          { return symbol(sym.PACKAGE);
          }
        case 205: break;
        case 110: 
          { return symbol(sym.FUNCTION);
          }
        case 206: break;
        case 109: 
          { return symbol(sym.CONSTANT);
          }
        case 207: break;
        case 84: 
          { return symbol(sym.DELAY);
          }
        case 208: break;
        case 99: 
          { return symbol(sym.ALIASED);
          }
        case 209: break;
        case 24: 
          { System.err.println("Error léxico: no es permitido un salto de línea en una cadena de caracteres. En línea "+yyline+", columna "+yycolumn);
          }
        case 210: break;
        case 101: 
          { return symbol(sym.SUBTYPE);
          }
        case 211: break;
        case 15: 
          { return symbol(sym.DIVIDE);
          }
        case 212: break;
        case 20: 
          { return symbol(sym.GT);
          }
        case 213: break;
        case 100: 
          { return symbol(sym.LIMITED);
          }
        case 214: break;
        case 113: 
          { return symbol(sym.SEPARATE);
          }
        case 215: break;
        case 93: 
          { return symbol(sym.NOT_IN);
          }
        case 216: break;
        case 86: 
          { return symbol(sym.TAGGED);
          }
        case 217: break;
        case 3: 
          { return symbol(sym.INTEGER_LITERAL,yytext());
          }
        case 218: break;
        case 33: 
          { return symbol(sym.DO);
          }
        case 219: break;
        case 49: 
          { return symbol(sym.FOR);
          }
        case 220: break;
        case 31: 
          { return symbol(sym.IS);
          }
        case 221: break;
        case 81: 
          { return symbol(sym.ABORT);
          }
        case 222: break;
        case 21: 
          { return symbol(sym.VERTICAL_LINE);
          }
        case 223: break;
        case 13: 
          { return symbol(sym.MULTIPLY);
          }
        case 224: break;
        case 63: 
          { return symbol(sym.CASE);
          }
        case 225: break;
        case 75: 
          { return symbol(sym.ENTRY);
          }
        case 226: break;
        case 104: 
          { return symbol(sym.INTEGER);
          }
        case 227: break;
        case 43: 
          { return symbol(sym.FLOATING_POINT_LITERAL,yytext());
          }
        case 228: break;
        case 18: 
          { return symbol(sym.LT);
          }
        case 229: break;
        case 50: 
          { return symbol(sym.ALL);
          }
        case 230: break;
        case 83: 
          { return symbol(sym.DELTA);
          }
        case 231: break;
        case 1: 
          { /*throw new Error("Caracter inesperado: <"+yytext()+"> en línea "+yyline+", columna "+yycolumn);*/
	System.err.println("Caracter inesperado: <"+yytext()+"> en línea "+yyline+", columna "+yycolumnn);
          }
        case 232: break;
        case 54: 
          { return symbol(sym.NEW);
          }
        case 233: break;
        case 2: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 234: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
