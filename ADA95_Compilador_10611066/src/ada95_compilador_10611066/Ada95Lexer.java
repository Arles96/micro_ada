package ada95_compilador_10611066;

/* The following code was generated by JFlex 1.4.2 on 09-06-09 08:00 PM */

/**Elementos léxicos del lenguaje de programación ADA-95.
*Autor: Luis Felipe Borjas Reyes @ 25 Agosto 2009
*
*/
/*Correr después del parser!*/
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 09-06-09 08:00 PM from the specification file
 * <tt>ada95_tokens.flex</tt>
 */
class Ada95Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\12\1\0\1\14\1\15\22\0\1\3\1\0\1\11"+
    "\1\5\2\0\1\47\1\16\1\50\1\51\1\52\1\7\1\53\1\10"+
    "\1\6\1\54\12\2\1\55\1\56\1\57\1\60\1\61\2\0\1\25"+
    "\1\30\1\36\1\20\1\17\1\24\1\34\1\43\1\33\1\1\1\44"+
    "\1\26\1\41\1\32\1\31\1\35\1\46\1\22\1\27\1\21\1\23"+
    "\1\45\1\42\1\40\1\37\1\1\4\0\1\4\1\0\1\25\1\30"+
    "\1\36\1\20\1\17\1\24\1\34\1\43\1\33\1\1\1\44\1\26"+
    "\1\41\1\32\1\31\1\35\1\46\1\22\1\27\1\21\1\23\1\13"+
    "\1\42\1\40\1\37\1\1\1\0\1\62\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\4\1\11\23\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\5\0\1\31\2\0\1\32\4\2"+
    "\1\33\16\2\1\34\14\2\1\35\1\2\1\36\3\2"+
    "\1\37\1\40\1\41\13\2\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\26\1\0\1\53"+
    "\1\54\1\0\2\55\1\32\1\2\1\56\20\2\1\57"+
    "\3\2\1\60\4\2\1\61\1\2\1\62\1\2\1\63"+
    "\1\2\1\64\12\2\1\65\1\66\1\2\1\67\1\2"+
    "\1\70\5\2\1\71\3\2\1\72\1\73\3\2\1\74"+
    "\1\0\1\75\2\2\1\76\6\2\1\77\1\100\1\2"+
    "\1\101\1\102\17\2\1\103\5\2\1\104\2\2\1\105"+
    "\2\2\1\106\5\2\1\107\1\2\1\110\1\111\1\2"+
    "\2\0\1\112\1\113\1\2\1\114\1\115\11\2\1\116"+
    "\1\117\1\120\1\2\1\121\1\122\2\2\1\123\6\2"+
    "\1\124\12\2\1\125\1\74\1\0\2\2\1\126\1\2"+
    "\1\127\1\2\1\130\1\2\1\131\4\2\1\132\1\133"+
    "\1\2\1\134\3\2\1\135\2\2\1\136\6\2\1\137"+
    "\1\2\1\140\1\141\1\142\1\2\1\143\1\2\1\144"+
    "\1\2\1\145\1\146\1\147\1\150\2\2\1\151\1\152"+
    "\3\2\1\153\1\154\1\155\2\2\1\156\1\157\1\160"+
    "\1\161\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\146"+
    "\0\u0165\0\146\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\146"+
    "\0\146\0\146\0\u05c7\0\146\0\u05fa\0\u062d\0\146\0\u0660"+
    "\0\u0693\0\u06c6\0\146\0\u06f9\0\u072c\0\146\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\146\0\u085e\0\u0891\0\u0891\0\u08c4"+
    "\0\u08f7\0\u092a\0\u095d\0\231\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\231\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\231"+
    "\0\u0ebe\0\231\0\u0ef1\0\u0f24\0\u0f57\0\231\0\231\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\146\0\146\0\146\0\146\0\146"+
    "\0\146\0\146\0\146\0\146\0\146\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\146\0\u12ba\0\146\0\u12ed\0\231\0\u1320\0\u1353"+
    "\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb"+
    "\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\231\0\u1650"+
    "\0\u1683\0\u16b6\0\231\0\u16e9\0\u171c\0\u174f\0\u1782\0\231"+
    "\0\u17b5\0\231\0\u17e8\0\u181b\0\u184e\0\231\0\u1881\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\231\0\231\0\u1a7f\0\231\0\u1ab2\0\231\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\231\0\u1be4\0\u1c17\0\u1c4a\0\231"+
    "\0\231\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\231\0\u1d7c"+
    "\0\u1daf\0\231\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1"+
    "\0\231\0\231\0\u1f14\0\231\0\231\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\u21ab\0\u21de\0\u2211\0\231\0\u2244\0\u2277\0\u22aa"+
    "\0\u22dd\0\u2310\0\231\0\u2343\0\u2376\0\231\0\u23a9\0\u23dc"+
    "\0\231\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\231\0\u250e"+
    "\0\231\0\231\0\u2541\0\u2574\0\u25a7\0\231\0\231\0\u25da"+
    "\0\231\0\231\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c"+
    "\0\u273f\0\u2772\0\u27a5\0\231\0\231\0\231\0\u27d8\0\231"+
    "\0\231\0\u280b\0\u283e\0\231\0\u2871\0\u28a4\0\u28d7\0\u290a"+
    "\0\u293d\0\u2970\0\231\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f"+
    "\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\231\0\u2ba1\0\u2bd4"+
    "\0\u2c07\0\u2c3a\0\231\0\u2c6d\0\231\0\u2ca0\0\231\0\u2cd3"+
    "\0\231\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\231\0\231\0\u2dd2"+
    "\0\231\0\u2e05\0\u2e38\0\u2e6b\0\231\0\u2e9e\0\u2ed1\0\231"+
    "\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\231\0\u3036"+
    "\0\231\0\231\0\231\0\u3069\0\231\0\u309c\0\231\0\u30cf"+
    "\0\231\0\231\0\231\0\231\0\u3102\0\u3135\0\231\0\231"+
    "\0\u3168\0\u319b\0\u31ce\0\231\0\231\0\231\0\u3201\0\u3234"+
    "\0\231\0\231\0\231\0\231\0\231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\3\1\7\1\10\1\11"+
    "\1\12\1\6\1\13\2\6\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\4\1\35\1\36"+
    "\1\37\4\4\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\11\54\1\55"+
    "\1\56\2\54\1\56\45\54\64\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\30\4\16\0\1\5\1\0\1\60"+
    "\1\61\1\62\10\0\1\63\46\0\1\6\6\0\4\6"+
    "\53\0\1\64\64\0\1\65\53\0\2\4\1\6\1\57"+
    "\5\0\1\6\1\13\2\6\1\0\30\4\14\0\12\66"+
    "\1\0\1\66\2\0\1\67\44\66\1\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\7\4\1\70\3\4\1\71"+
    "\5\4\1\72\6\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\73\11\4\1\74\1\4\1\75\13\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\1\76"+
    "\2\4\1\77\2\4\1\100\11\4\1\101\3\4\1\102"+
    "\3\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\1\103\5\4\1\104\21\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\10\4\1\105\2\4\1\106\14\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\4\4"+
    "\1\107\1\4\1\110\1\111\2\4\1\112\15\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\2\4\1\113"+
    "\1\114\3\4\1\115\1\4\1\116\1\4\1\117\3\4"+
    "\1\120\10\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\12\4\1\121\1\4\1\122\13\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\1\123\3\4\1\124"+
    "\23\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\1\125\11\4\1\126\15\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\2\4\1\127\1\130\1\131\1\132"+
    "\22\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\1\133\3\4\1\134\5\4\1\135\15\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\5\4\1\136\2\4"+
    "\1\137\2\4\1\140\14\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\1\141\11\4\1\142\15\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\3\4\1\143"+
    "\1\144\1\4\1\145\21\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\6\4\1\146\3\4\1\147\15\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\12\4"+
    "\1\150\15\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\12\4\1\151\15\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\14\4\1\152\7\4\1\153\3\4"+
    "\66\0\1\154\70\0\1\155\62\0\1\156\61\0\1\157"+
    "\1\160\1\161\62\0\1\162\61\0\1\163\1\164\1\0"+
    "\11\54\2\0\2\54\1\0\45\54\11\0\1\165\52\0"+
    "\2\4\10\0\1\4\3\0\30\4\16\0\1\5\62\0"+
    "\1\166\14\0\2\166\3\0\2\166\2\0\1\166\5\0"+
    "\1\166\26\0\1\167\62\0\1\170\4\0\2\171\52\0"+
    "\12\65\1\172\2\65\1\173\45\65\16\0\1\174\45\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\10\4\1\175"+
    "\17\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\1\4\1\176\1\177\25\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\14\4\1\200\2\4\1\201\10\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\7\4"+
    "\1\202\7\4\1\203\10\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\15\4\1\204\12\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\3\4\1\205\24\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\4\4"+
    "\1\206\23\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\10\4\1\207\4\4\1\210\12\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\16\4\1\211\11\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\1\212"+
    "\27\4\15\0\2\4\1\0\1\57\6\0\1\213\3\0"+
    "\2\4\1\214\10\4\1\215\3\4\1\216\2\4\1\217"+
    "\3\4\1\213\1\220\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\13\4\1\221\1\222\13\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\1\223\27\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\2\4\1\224"+
    "\25\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\13\4\1\225\14\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\7\4\1\226\20\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\12\4\1\227\15\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\3\4\1\230"+
    "\24\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\3\4\1\231\24\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\7\4\1\232\4\4\1\233\13\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\10\4\1\234"+
    "\1\4\1\235\15\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\4\1\236\26\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\17\4\1\237\10\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\12\4\1\240"+
    "\15\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\22\4\1\241\5\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\7\4\1\242\6\4\1\243\11\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\11\4\1\244"+
    "\16\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\15\4\1\245\12\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\4\1\246\10\4\1\247\15\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\24\4\1\250"+
    "\3\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\2\4\1\251\25\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\23\4\1\252\4\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\7\4\1\253\20\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\2\4\1\254"+
    "\25\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\2\4\1\255\25\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\2\4\1\256\10\4\1\257\14\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\2\4\1\260"+
    "\25\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\6\4\1\261\3\4\1\262\1\4\1\263\13\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\2\4\1\264"+
    "\25\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\17\4\1\265\10\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\10\4\1\266\17\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\13\4\1\267\14\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\3\4\1\270"+
    "\24\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\1\4\1\271\26\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\2\4\1\272\25\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\1\273\13\4\1\274\13\4"+
    "\16\0\1\166\1\0\1\61\1\275\1\276\10\0\2\166"+
    "\3\0\2\166\2\0\1\166\5\0\1\166\26\0\1\167"+
    "\1\0\1\62\12\0\1\63\45\0\1\170\1\0\1\171"+
    "\60\0\1\170\72\0\1\172\51\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\1\277\13\4\1\300\13\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\3\4\1\301"+
    "\24\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\2\4\1\302\25\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\303\27\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\2\4\1\304\3\4\1\305\21\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\7\4"+
    "\1\306\20\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\14\4\1\307\13\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\22\4\1\310\5\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\1\311\27\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\25\4\1\312"+
    "\2\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\15\4\1\313\12\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\314\27\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\13\4\1\315\14\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\1\316\27\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\4\4\1\317"+
    "\23\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\6\4\1\320\21\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\12\4\1\321\15\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\4\4\1\322\23\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\15\4\1\323"+
    "\12\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\10\4\1\324\17\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\14\4\1\325\13\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\17\4\1\326\10\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\10\4\1\206"+
    "\17\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\6\4\1\327\21\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\6\4\1\330\21\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\6\4\1\331\21\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\2\4\1\332"+
    "\25\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\3\4\1\333\24\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\334\27\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\16\4\1\335\11\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\14\4\1\336\13\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\1\337"+
    "\27\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\6\4\1\340\21\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\2\4\1\341\25\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\14\4\1\342\13\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\20\4\1\343"+
    "\7\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\7\4\1\344\20\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\345\27\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\7\4\1\346\20\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\1\347\27\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\1\350\27\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\12\4"+
    "\1\351\15\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\15\4\1\352\12\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\2\4\1\353\14\4\1\354\10\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\355\3\0\26\4"+
    "\1\355\1\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\25\4\1\356\2\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\1\357\27\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\10\4\1\360\17\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\24\4\1\361"+
    "\3\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\13\4\1\362\14\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\7\4\1\363\20\4\33\0\1\364\45\0"+
    "\1\365\14\0\2\365\3\0\2\365\2\0\1\365\5\0"+
    "\1\365\25\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\5\4\1\366\22\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\20\4\1\367\7\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\16\4\1\370\11\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\6\4\1\371"+
    "\21\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\20\4\1\372\7\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\6\4\1\373\21\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\2\4\1\374\25\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\14\4\1\375"+
    "\13\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\1\376\27\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\3\4\1\377\24\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\3\4\1\u0100\24\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\22\4\1\u0101\5\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\3\4"+
    "\1\u0102\24\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\1\u0103\27\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\u0104\27\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\1\u0105\27\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\7\4\1\u0106\20\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\2\4\1\u0107"+
    "\25\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\2\4\1\u0108\25\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\20\4\1\u0109\7\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\10\4\1\u010a\17\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\3\4\1\u010b"+
    "\24\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\2\4\1\u010c\25\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\10\4\1\u010d\5\4\1\u010e\11\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\2\4\1\u010f"+
    "\25\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\17\4\1\u0110\10\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\3\4\1\u0111\24\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\20\4\1\u0112\7\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\13\4\1\u0113"+
    "\14\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\1\u0114\27\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\3\4\1\u0115\24\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\15\4\1\u0116\12\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\3\4\1\u0117\24\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\22\4"+
    "\1\u0118\5\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\1\u0119\27\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\u011a\27\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\6\4\1\u011b\21\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\6\4\1\u011c\21\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\2\4"+
    "\1\u011d\25\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\1\u011e\27\4\16\0\1\u011f\4\0\2\u0120\54\0"+
    "\1\365\1\0\1\276\1\275\11\0\2\365\3\0\2\365"+
    "\2\0\1\365\5\0\1\365\25\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\2\4\1\u0121\25\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\3\4\1\u0122\24\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\10\4"+
    "\1\u0123\17\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\13\4\1\u0124\14\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\1\4\1\u0125\26\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\10\4\1\u0126\17\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\13\4"+
    "\1\u0127\14\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\1\u0128\27\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\4\1\u0129\26\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\4\4\1\u012a\23\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\14\4\1\u012b"+
    "\13\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\1\u012c\27\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\6\4\1\u012d\21\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\10\4\1\u012e\17\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\2\4\1\u012f\25\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\1\u0130"+
    "\27\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\2\4\1\u0131\25\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\6\4\1\u0132\21\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\16\4\1\u0133\11\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\6\4\1\u0134"+
    "\21\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\10\4\1\u0135\17\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\u0136\27\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\14\4\1\u0137\13\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\6\4\1\u0138\21\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\17\4"+
    "\1\u0139\10\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\1\4\1\u013a\26\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\2\4\1\u013b\25\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\15\4\1\u013c\12\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\6\4"+
    "\1\u013d\21\4\16\0\1\u011f\1\0\1\u0120\60\0\1\u011f"+
    "\61\0\2\4\1\0\1\57\6\0\1\4\3\0\14\4"+
    "\1\u013e\13\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\1\u013f\27\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\6\4\1\u0140\21\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\1\u0141\27\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\10\4\1\u0142\17\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\1\u0143"+
    "\27\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\12\4\1\u0144\15\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\4\1\u0145\26\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\17\4\1\u0146\10\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\1\4\1\u0147"+
    "\26\4\15\0\2\4\1\0\1\57\6\0\1\4\3\0"+
    "\2\4\1\u0148\25\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\u0149\27\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\13\4\1\u014a\14\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\3\4\1\u014b\24\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\17\4"+
    "\1\u014c\10\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\2\4\1\u014d\25\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\4\4\1\u014e\23\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\1\u014f\27\4\15\0"+
    "\2\4\1\0\1\57\6\0\1\4\3\0\1\u0150\27\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\13\4"+
    "\1\u0151\14\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\12\4\1\u0152\15\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\2\4\1\u0153\25\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\13\4\1\u0154\14\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\2\4"+
    "\1\u0155\25\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\1\u0156\27\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\u0157\27\4\15\0\2\4\1\0\1\57"+
    "\6\0\1\4\3\0\3\4\1\u0158\24\4\15\0\2\4"+
    "\1\0\1\57\6\0\1\4\3\0\2\4\1\u0159\25\4"+
    "\15\0\2\4\1\0\1\57\6\0\1\4\3\0\13\4"+
    "\1\u015a\14\4\15\0\2\4\1\0\1\57\6\0\1\4"+
    "\3\0\1\u015b\27\4\15\0\2\4\1\0\1\57\6\0"+
    "\1\4\3\0\1\4\1\u015c\26\4\15\0\2\4\1\0"+
    "\1\57\6\0\1\4\3\0\1\u015d\27\4\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12903];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\1\11\25\1\3\11"+
    "\1\1\1\11\2\1\1\11\3\1\1\11\2\1\1\11"+
    "\5\0\1\11\2\0\65\1\12\11\1\0\2\1\1\0"+
    "\1\11\1\1\1\11\101\1\1\0\65\1\2\0\52\1"+
    "\1\0\75\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
StringBuffer string=new StringBuffer();
/**Función para crear un nuevo símbolo de java_cup.runtime vacío*/
private Symbol symbol(int type){
	return new Symbol(type,yyline,yycolumn);
}

/**Función para crear un nuevo símbolo de java_cup.runtime con valor
*@ param value el valor del símbolo
*/
private Symbol symbol(int type, Object value){
	return new Symbol(type, yyline, yycolumn, value);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Ada95Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Ada95Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 112: 
          { return symbol(sym.TERMINATE);
          }
        case 115: break;
        case 65: 
          { return symbol(sym.TYPE);
          }
        case 116: break;
        case 38: 
          { return symbol(sym.LTEQ);
          }
        case 117: break;
        case 59: 
          { return symbol(sym.MOD);
          }
        case 118: break;
        case 33: 
          { return symbol(sym.IN);
          }
        case 119: break;
        case 3: 
          { return symbol(sym.INTEGER_LITERAL,new Integer(Integer.parseInt(yytext().replaceAll("_",""))));
          }
        case 120: break;
        case 108: 
          { return symbol(sym.ABSTRACT);
          }
        case 121: break;
        case 45: 
          { /*ignorar*/
          }
        case 122: break;
        case 24: 
          { System.err.println("Error léxico: no es permitido un salto de línea en una cadena de caracteres. En línea "+(yyline+1)+", columna "+(yycolumn+1));
          }
        case 123: break;
        case 78: 
          { return symbol(sym.RANGE);
          }
        case 124: break;
        case 29: 
          { return symbol(sym.OR);
          }
        case 125: break;
        case 10: 
          { return symbol(sym.CONCATENATE);
          }
        case 126: break;
        case 91: 
          { return symbol(sym.ACCEPT);
          }
        case 127: break;
        case 73: 
          { return symbol(sym.WHEN);
          }
        case 128: break;
        case 57: 
          { return symbol(sym.PUT);
          }
        case 129: break;
        case 68: 
          { return symbol(sym.BODY);
          }
        case 130: break;
        case 8: 
          { string.setLength(0);yybegin(STRING);
          }
        case 131: break;
        case 82: 
          { return symbol(sym.ARRAY);
          }
        case 132: break;
        case 11: 
          { return symbol(sym.LEFTPAR);
          }
        case 133: break;
        case 81: 
          { return symbol(sym.FLOAT);
          }
        case 134: break;
        case 7: 
          { return symbol(sym.MINUS);
          }
        case 135: break;
        case 25: 
          { return symbol(sym.DOUBLEDOT);
          }
        case 136: break;
        case 74: 
          { return symbol(sym.ELSIF);
          }
        case 137: break;
        case 17: 
          { return symbol(sym.SEMICOLON);
          }
        case 138: break;
        case 61: 
          { return symbol(sym.ELSE);
          }
        case 139: break;
        case 62: 
          { return symbol(sym.EXIT);
          }
        case 140: break;
        case 19: 
          { return symbol(sym.EQUAL);
          }
        case 141: break;
        case 37: 
          { return symbol(sym.LEFTLABEL);
          }
        case 142: break;
        case 1: 
          { /*throw new Error("Caracter inesperado: <"+yytext()+"> en línea "+yyline+", columna "+yycolumn);*/
	System.err.println("Caracter inesperado: <"+yytext()+"> en línea "+(yyline+1)+", columna "+(yycolumn+1));
          }
        case 143: break;
        case 98: 
          { return symbol(sym.REQUEUE);
          }
        case 144: break;
        case 97: 
          { return symbol(sym.RENAMES);
          }
        case 145: break;
        case 36: 
          { return symbol(sym.ASSIGNMENT);
          }
        case 146: break;
        case 5: 
          { return symbol(sym.POINT);
          }
        case 147: break;
        case 80: 
          { return symbol(sym.UNTIL);
          }
        case 148: break;
        case 90: 
          { return symbol(sym.ACCESS);
          }
        case 149: break;
        case 23: 
          { yybegin(YYINITIAL);
	 return symbol(sym.STRING_LITERAL,string.toString());
          }
        case 150: break;
        case 111: 
          { return symbol(sym.EXCEPTION);
          }
        case 151: break;
        case 41: 
          { return symbol(sym.GTEQ);
          }
        case 152: break;
        case 16: 
          { return symbol(sym.COLON);
          }
        case 153: break;
        case 67: 
          { return symbol(sym.LOOP);
          }
        case 154: break;
        case 52: 
          { return symbol(sym.AND);
          }
        case 155: break;
        case 92: 
          { return symbol(sym.SELECT);
          }
        case 156: break;
        case 113: 
          { return symbol(sym.PROTECTED);
          }
        case 157: break;
        case 94: 
          { return symbol(sym.PRAGMA);
          }
        case 158: break;
        case 53: 
          { return symbol(sym.OUT);
          }
        case 159: break;
        case 96: 
          { return symbol(sym.REVERSE);
          }
        case 160: break;
        case 31: 
          { return symbol(sym.IF);
          }
        case 161: break;
        case 55: 
          { return symbol(sym.NOT);
          }
        case 162: break;
        case 79: 
          { return symbol(sym.RAISE);
          }
        case 163: break;
        case 12: 
          { return symbol(sym.RIGHTPAR);
          }
        case 164: break;
        case 104: 
          { return symbol(sym.GENERIC);
          }
        case 165: break;
        case 85: 
          { return symbol(sym.WHILE);
          }
        case 166: break;
        case 56: 
          { return symbol(sym.GET);
          }
        case 167: break;
        case 26: 
          { return symbol(sym.CHARACTER_LITERAL,yytext());
          }
        case 168: break;
        case 95: 
          { return symbol(sym.DECLARE);
          }
        case 169: break;
        case 14: 
          { return symbol(sym.COMMA);
          }
        case 170: break;
        case 64: 
          { return symbol(sym.TASK);
          }
        case 171: break;
        case 89: 
          { return symbol(sym.RECORD);
          }
        case 172: break;
        case 86: 
          { return symbol(sym.DIGITS);
          }
        case 173: break;
        case 35: 
          { return symbol(sym.INEQUALITY);
          }
        case 174: break;
        case 39: 
          { return symbol(sym.BOX);
          }
        case 175: break;
        case 30: 
          { return symbol(sym.OF);
          }
        case 176: break;
        case 51: 
          { return symbol(sym.ABS);
          }
        case 177: break;
        case 102: 
          { return symbol(sym.BOOLEAN);
          }
        case 178: break;
        case 69: 
          { return symbol(sym.NULL);
          }
        case 179: break;
        case 9: 
          { return symbol(sym.TICK);
          }
        case 180: break;
        case 72: 
          { return symbol(sym.WITH);
          }
        case 181: break;
        case 22: 
          { string.append(yytext());
          }
        case 182: break;
        case 46: 
          { return symbol(sym.END);
          }
        case 183: break;
        case 58: 
          { return symbol(sym.XOR);
          }
        case 184: break;
        case 6: 
          { return symbol(sym.PLUS);
          }
        case 185: break;
        case 93: 
          { return symbol(sym.OTHERS);
          }
        case 186: break;
        case 47: 
          { return symbol(sym.REM);
          }
        case 187: break;
        case 40: 
          { return symbol(sym.ARROW);
          }
        case 188: break;
        case 48: 
          { return symbol(sym.USE);
          }
        case 189: break;
        case 84: 
          { return symbol(sym.BEGIN);
          }
        case 190: break;
        case 70: 
          { return symbol(sym.GOTO);
          }
        case 191: break;
        case 4: 
          { /*return symbol(sym.SEPARATOR);*/
          }
        case 192: break;
        case 66: 
          { return symbol(sym.THEN);
          }
        case 193: break;
        case 42: 
          { return symbol(sym.RIGHTLABEL);
          }
        case 194: break;
        case 105: 
          { return symbol(sym.PRIVATE);
          }
        case 195: break;
        case 34: 
          { return symbol(sym.EXPONENTIATE);
          }
        case 196: break;
        case 114: 
          { return symbol(sym.PROCEDURE);
          }
        case 197: break;
        case 88: 
          { return symbol(sym.RETURN);
          }
        case 198: break;
        case 43: 
          { return symbol(sym.FLOATING_POINT_LITERAL,new Float(Float.parseFloat(yytext().replaceAll("_",""))));
          }
        case 199: break;
        case 28: 
          { return symbol(sym.AT);
          }
        case 200: break;
        case 106: 
          { return symbol(sym.PACKAGE);
          }
        case 201: break;
        case 107: 
          { return symbol(sym.FUNCTION);
          }
        case 202: break;
        case 110: 
          { return symbol(sym.CONSTANT);
          }
        case 203: break;
        case 77: 
          { return symbol(sym.DELAY);
          }
        case 204: break;
        case 99: 
          { return symbol(sym.ALIASED);
          }
        case 205: break;
        case 101: 
          { return symbol(sym.SUBTYPE);
          }
        case 206: break;
        case 60: 
          { System.err.println("<"+yytext()+"> Es un número con base, este compilador sólo acepta números enteros y de punto flotante sin exponente; en línea "+(yyline+1)+", columna "+(yycolumn+1));
          }
        case 207: break;
        case 15: 
          { return symbol(sym.DIVIDE);
          }
        case 208: break;
        case 20: 
          { return symbol(sym.GT);
          }
        case 209: break;
        case 100: 
          { return symbol(sym.LIMITED);
          }
        case 210: break;
        case 44: 
          { System.err.println("<"+yytext()+"> Es un número con exponente, este compilador sólo acepta números enteros y de punto flotante sin exponente en línea "+(yyline+1)+", columna "+(yycolumn+1));
          }
        case 211: break;
        case 109: 
          { return symbol(sym.SEPARATE);
          }
        case 212: break;
        case 87: 
          { return symbol(sym.TAGGED);
          }
        case 213: break;
        case 27: 
          { return symbol(sym.DO);
          }
        case 214: break;
        case 49: 
          { return symbol(sym.FOR);
          }
        case 215: break;
        case 32: 
          { return symbol(sym.IS);
          }
        case 216: break;
        case 83: 
          { return symbol(sym.ABORT);
          }
        case 217: break;
        case 21: 
          { return symbol(sym.VERTICAL_LINE);
          }
        case 218: break;
        case 13: 
          { return symbol(sym.MULTIPLY);
          }
        case 219: break;
        case 71: 
          { return symbol(sym.CASE);
          }
        case 220: break;
        case 75: 
          { return symbol(sym.ENTRY);
          }
        case 221: break;
        case 63: 
          { return symbol(sym.BOOLEAN_LITERAL,new Boolean(Boolean.parseBoolean(yytext())));
          }
        case 222: break;
        case 103: 
          { return symbol(sym.INTEGER);
          }
        case 223: break;
        case 18: 
          { return symbol(sym.LT);
          }
        case 224: break;
        case 50: 
          { return symbol(sym.ALL);
          }
        case 225: break;
        case 76: 
          { return symbol(sym.DELTA);
          }
        case 226: break;
        case 54: 
          { return symbol(sym.NEW);
          }
        case 227: break;
        case 2: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 228: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
